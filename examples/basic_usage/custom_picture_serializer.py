#!/usr/bin/env python3
"""Custom Picture Serializer Example - PRD Pattern Implementation

This example demonstrates how to create and use custom picture serializers
with DocPivot's MarkdownDocSerializer, following the PRD usage pattern.
"""

from docpivot.io.readers import DoclingJsonReader
from docling_core.transforms.serializer.markdown import MarkdownDocSerializer


class AnnotationPictureSerializer:
    """Custom picture serializer that adds annotations and metadata to images.
    
    This example serializer demonstrates how to extend DocPivot's functionality
    by providing custom component serializers that modify how specific content
    types are handled during serialization.
    """
    
    def __init__(self, annotation_prefix="📷", include_dimensions=True):
        """Initialize the annotation picture serializer.
        
        Args:
            annotation_prefix: Emoji or text to prefix image descriptions
            include_dimensions: Whether to include image dimensions in output
        """
        self.annotation_prefix = annotation_prefix
        self.include_dimensions = include_dimensions
    
    def serialize(self, picture_item, params=None):
        """Serialize a picture item with custom annotations.
        
        Args:
            picture_item: The picture item from the DoclingDocument
            params: Optional parameters (not used in this example)
            
        Returns:
            str: Custom markdown representation of the image
        """
        # Get basic image information
        image_path = getattr(picture_item, 'file', 'unknown.jpg')
        caption = getattr(picture_item, 'caption', 'Image')
        
        # Build custom markdown with annotations
        result = f"{self.annotation_prefix} **{caption}**"
        
        # Add dimensions if available and requested
        if self.include_dimensions:
            width = getattr(picture_item, 'width', None)
            height = getattr(picture_item, 'height', None)
            if width and height:
                result += f" ({width}x{height}px)"
        
        # Add image reference
        result += f"\n\n![{caption}]({image_path})\n"
        
        # Add metadata comment
        result += f"\n<!-- Generated by AnnotationPictureSerializer -->\n"
        
        return result


def main():
    """Demonstrate custom picture serializer usage."""
    print("=== Custom Picture Serializer (PRD Example) ===\n")
    
    # PRD Example Implementation:
    # from docling_core.transforms.serializer.markdown import MarkdownDocSerializer
    # from my_custom.picture_serializer import AnnotationPictureSerializer
    #
    # serializer = MarkdownDocSerializer(
    #     doc=doc,
    #     picture_serializer=AnnotationPictureSerializer(),
    # )
    # ser_result = serializer.serialize()
    # print(ser_result.text)
    
    try:
        # Load document
        print("1. Loading Docling JSON document...")
        reader = DoclingJsonReader()
        doc = reader.load_data("data/json/2025-07-03-Test-PDF-Styles.docling.json")
        print(f"   ✓ Loaded document: {doc.name}")
        print(f"   ✓ Text items: {len(doc.texts)}")
        print(f"   ✓ Tables: {len(doc.tables)}")
        print(f"   ✓ Pictures: {len(doc.pictures)}")
        
        # Example 1: Standard serialization (for comparison)
        print("\n2. Standard Picture Serialization...")
        standard_serializer = MarkdownDocSerializer(doc=doc)
        standard_result = standard_serializer.serialize()
        print(f"   ✓ Generated {len(standard_result.text)} characters")
        
        # Example 2: Custom picture serializer with basic annotations
        print("\n3. Custom Picture Serializer with Basic Annotations...")
        basic_picture_serializer = AnnotationPictureSerializer()
        basic_custom_serializer = MarkdownDocSerializer(
            doc=doc,
            picture_serializer=basic_picture_serializer
        )
        basic_custom_result = basic_custom_serializer.serialize()
        print(f"   ✓ Generated {len(basic_custom_result.text)} characters")
        
        # Example 3: Advanced custom picture serializer
        print("\n4. Advanced Custom Picture Serializer...")
        advanced_picture_serializer = AnnotationPictureSerializer(
            annotation_prefix="🖼️ IMAGE:",
            include_dimensions=True
        )
        advanced_custom_serializer = MarkdownDocSerializer(
            doc=doc,
            picture_serializer=advanced_picture_serializer
        )
        advanced_custom_result = advanced_custom_serializer.serialize()
        print(f"   ✓ Generated {len(advanced_custom_result.text)} characters")
        
        # Compare outputs
        print("\n5. Output Comparison:")
        print(f"   Standard serialization: {len(standard_result.text)} characters")
        print(f"   Basic custom serialization: {len(basic_custom_result.text)} characters")
        print(f"   Advanced custom serialization: {len(advanced_custom_result.text)} characters")
        
        # Show differences in handling (if document has pictures)
        if len(doc.pictures) > 0:
            print(f"\n6. Picture Processing Demonstration:")
            print(f"   Document contains {len(doc.pictures)} picture(s)")
            
            # Show a snippet focusing on picture differences
            print("\n   Standard output preview:")
            self._show_snippet_with_images(standard_result.text)
            
            print("\n   Custom output preview:")
            self._show_snippet_with_images(advanced_custom_result.text)
        else:
            print(f"\n6. No pictures found in document - showing general output preview:")
            print("\n   Advanced custom output preview:")
            lines = advanced_custom_result.text.split('\n')
            for i, line in enumerate(lines[:15]):
                print(f"   {i+1:2d}: {line}")
            if len(lines) > 15:
                print(f"       ... ({len(lines) - 15} more lines)")
        
        # Save outputs
        outputs = [
            ("output_standard_pictures.md", standard_result.text),
            ("output_basic_custom_pictures.md", basic_custom_result.text),
            ("output_advanced_custom_pictures.md", advanced_custom_result.text)
        ]
        
        print(f"\n7. Saving outputs...")
        for filename, content in outputs:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"   Saved: {filename}")
        
        print("\n✅ Custom picture serializer demonstration completed!")
        print("\nCustom serialization features demonstrated:")
        print("  ✓ Custom picture serializer implementation")
        print("  ✓ Annotation and metadata enhancement")
        print("  ✓ Configurable serializer parameters")
        print("  ✓ Integration with MarkdownDocSerializer")
        print("  ✓ Output comparison between standard and custom serializers")
        
    except FileNotFoundError as e:
        print(f"❌ Error: Input file not found - {e}")
        print("   Make sure you're running this from the project root directory")
    except Exception as e:
        print(f"❌ Unexpected error: {type(e).__name__}: {e}")


def _show_snippet_with_images(text, max_lines=10):
    """Show a snippet of text, focusing on lines that might contain image references."""
    lines = text.split('\n')
    
    # Look for lines with image-related content
    image_lines = []
    for i, line in enumerate(lines):
        if any(keyword in line.lower() for keyword in ['image', '![', 'jpg', 'png', '📷', '🖼️']):
            # Include context around image lines
            start = max(0, i - 2)
            end = min(len(lines), i + 3)
            image_lines.extend(range(start, end))
    
    # Remove duplicates and sort
    image_lines = sorted(set(image_lines))
    
    if image_lines:
        # Show lines with image content
        shown_lines = 0
        for line_num in image_lines:
            if shown_lines >= max_lines:
                break
            print(f"   {line_num+1:2d}: {lines[line_num]}")
            shown_lines += 1
        
        if len(image_lines) > max_lines:
            print(f"       ... ({len(image_lines) - max_lines} more image-related lines)")
    else:
        # Fallback to first few lines
        for i, line in enumerate(lines[:max_lines]):
            print(f"   {i+1:2d}: {line}")
        if len(lines) > max_lines:
            print(f"       ... ({len(lines) - max_lines} more lines)")


if __name__ == "__main__":
    main()